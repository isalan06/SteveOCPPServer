/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db.tables;


import java.util.Arrays;
import java.util.List;

import jooq.steve.db.Keys;
import jooq.steve.db.Stevedb;
import jooq.steve.db.tables.records.ConnectorChargingProfileRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectorChargingProfile extends TableImpl<ConnectorChargingProfileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stevedb.connector_charging_profile</code>
     */
    public static final ConnectorChargingProfile CONNECTOR_CHARGING_PROFILE = new ConnectorChargingProfile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConnectorChargingProfileRecord> getRecordType() {
        return ConnectorChargingProfileRecord.class;
    }

    /**
     * The column <code>stevedb.connector_charging_profile.connector_pk</code>.
     */
    public final TableField<ConnectorChargingProfileRecord, Integer> CONNECTOR_PK = createField(DSL.name("connector_pk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>stevedb.connector_charging_profile.charging_profile_pk</code>.
     */
    public final TableField<ConnectorChargingProfileRecord, Integer> CHARGING_PROFILE_PK = createField(DSL.name("charging_profile_pk"), SQLDataType.INTEGER.nullable(false), this, "");

    private ConnectorChargingProfile(Name alias, Table<ConnectorChargingProfileRecord> aliased) {
        this(alias, aliased, null);
    }

    private ConnectorChargingProfile(Name alias, Table<ConnectorChargingProfileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stevedb.connector_charging_profile</code> table
     * reference
     */
    public ConnectorChargingProfile(String alias) {
        this(DSL.name(alias), CONNECTOR_CHARGING_PROFILE);
    }

    /**
     * Create an aliased <code>stevedb.connector_charging_profile</code> table
     * reference
     */
    public ConnectorChargingProfile(Name alias) {
        this(alias, CONNECTOR_CHARGING_PROFILE);
    }

    /**
     * Create a <code>stevedb.connector_charging_profile</code> table reference
     */
    public ConnectorChargingProfile() {
        this(DSL.name("connector_charging_profile"), null);
    }

    public <O extends Record> ConnectorChargingProfile(Table<O> child, ForeignKey<O, ConnectorChargingProfileRecord> key) {
        super(child, key, CONNECTOR_CHARGING_PROFILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stevedb.STEVEDB;
    }

    @Override
    public List<UniqueKey<ConnectorChargingProfileRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_CONNECTOR_CHARGING_PROFILE_UQ_CONNECTOR_CHARGING_PROFILE);
    }

    @Override
    public List<ForeignKey<ConnectorChargingProfileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CONNECTOR_CHARGING_PROFILE_CONNECTOR_PK, Keys.FK_CONNECTOR_CHARGING_PROFILE_CHARGING_PROFILE_PK);
    }

    private transient Connector _connector;
    private transient ChargingProfile _chargingProfile;

    public Connector connector() {
        if (_connector == null)
            _connector = new Connector(this, Keys.FK_CONNECTOR_CHARGING_PROFILE_CONNECTOR_PK);

        return _connector;
    }

    public ChargingProfile chargingProfile() {
        if (_chargingProfile == null)
            _chargingProfile = new ChargingProfile(this, Keys.FK_CONNECTOR_CHARGING_PROFILE_CHARGING_PROFILE_PK);

        return _chargingProfile;
    }

    @Override
    public ConnectorChargingProfile as(String alias) {
        return new ConnectorChargingProfile(DSL.name(alias), this);
    }

    @Override
    public ConnectorChargingProfile as(Name alias) {
        return new ConnectorChargingProfile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConnectorChargingProfile rename(String name) {
        return new ConnectorChargingProfile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConnectorChargingProfile rename(Name name) {
        return new ConnectorChargingProfile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
