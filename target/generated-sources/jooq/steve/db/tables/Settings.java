/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db.tables;


import java.util.Arrays;
import java.util.List;

import jooq.steve.db.Keys;
import jooq.steve.db.Stevedb;
import jooq.steve.db.tables.records.SettingsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Settings extends TableImpl<SettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stevedb.settings</code>
     */
    public static final Settings SETTINGS = new Settings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SettingsRecord> getRecordType() {
        return SettingsRecord.class;
    }

    /**
     * The column <code>stevedb.settings.app_id</code>.
     */
    public final TableField<SettingsRecord, String> APP_ID = createField(DSL.name("app_id"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>stevedb.settings.heartbeat_interval_in_seconds</code>.
     */
    public final TableField<SettingsRecord, Integer> HEARTBEAT_INTERVAL_IN_SECONDS = createField(DSL.name("heartbeat_interval_in_seconds"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stevedb.settings.hours_to_expire</code>.
     */
    public final TableField<SettingsRecord, Integer> HOURS_TO_EXPIRE = createField(DSL.name("hours_to_expire"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>stevedb.settings.mail_enabled</code>.
     */
    public final TableField<SettingsRecord, Boolean> MAIL_ENABLED = createField(DSL.name("mail_enabled"), SQLDataType.BOOLEAN.defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stevedb.settings.mail_host</code>.
     */
    public final TableField<SettingsRecord, String> MAIL_HOST = createField(DSL.name("mail_host"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.settings.mail_username</code>.
     */
    public final TableField<SettingsRecord, String> MAIL_USERNAME = createField(DSL.name("mail_username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.settings.mail_password</code>.
     */
    public final TableField<SettingsRecord, String> MAIL_PASSWORD = createField(DSL.name("mail_password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.settings.mail_from</code>.
     */
    public final TableField<SettingsRecord, String> MAIL_FROM = createField(DSL.name("mail_from"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stevedb.settings.mail_protocol</code>.
     */
    public final TableField<SettingsRecord, String> MAIL_PROTOCOL = createField(DSL.name("mail_protocol"), SQLDataType.VARCHAR(255).defaultValue(DSL.inline("smtp", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>stevedb.settings.mail_port</code>.
     */
    public final TableField<SettingsRecord, Integer> MAIL_PORT = createField(DSL.name("mail_port"), SQLDataType.INTEGER.defaultValue(DSL.inline("25", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stevedb.settings.mail_recipients</code>. comma separated
     * list of email addresses
     */
    public final TableField<SettingsRecord, String> MAIL_RECIPIENTS = createField(DSL.name("mail_recipients"), SQLDataType.CLOB, this, "comma separated list of email addresses");

    /**
     * The column <code>stevedb.settings.notification_features</code>. comma
     * separated list
     */
    public final TableField<SettingsRecord, String> NOTIFICATION_FEATURES = createField(DSL.name("notification_features"), SQLDataType.CLOB, this, "comma separated list");

    private Settings(Name alias, Table<SettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Settings(Name alias, Table<SettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stevedb.settings</code> table reference
     */
    public Settings(String alias) {
        this(DSL.name(alias), SETTINGS);
    }

    /**
     * Create an aliased <code>stevedb.settings</code> table reference
     */
    public Settings(Name alias) {
        this(alias, SETTINGS);
    }

    /**
     * Create a <code>stevedb.settings</code> table reference
     */
    public Settings() {
        this(DSL.name("settings"), null);
    }

    public <O extends Record> Settings(Table<O> child, ForeignKey<O, SettingsRecord> key) {
        super(child, key, SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stevedb.STEVEDB;
    }

    @Override
    public UniqueKey<SettingsRecord> getPrimaryKey() {
        return Keys.KEY_SETTINGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SettingsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SETTINGS_SETTINGS_ID_UNIQUE);
    }

    @Override
    public Settings as(String alias) {
        return new Settings(DSL.name(alias), this);
    }

    @Override
    public Settings as(Name alias) {
        return new Settings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(String name) {
        return new Settings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(Name name) {
        return new Settings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, Integer, Integer, Boolean, String, String, String, String, String, Integer, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
