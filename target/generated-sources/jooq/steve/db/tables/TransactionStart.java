/*
 * This file is generated by jOOQ.
 */
package jooq.steve.db.tables;


import de.rwth.idsg.steve.utils.DateTimeConverter;

import java.util.Arrays;
import java.util.List;

import jooq.steve.db.Indexes;
import jooq.steve.db.Keys;
import jooq.steve.db.Stevedb;
import jooq.steve.db.tables.records.TransactionStartRecord;

import org.joda.time.DateTime;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionStart extends TableImpl<TransactionStartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stevedb.transaction_start</code>
     */
    public static final TransactionStart TRANSACTION_START = new TransactionStart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionStartRecord> getRecordType() {
        return TransactionStartRecord.class;
    }

    /**
     * The column <code>stevedb.transaction_start.transaction_pk</code>.
     */
    public final TableField<TransactionStartRecord, Integer> TRANSACTION_PK = createField(DSL.name("transaction_pk"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stevedb.transaction_start.event_timestamp</code>.
     */
    public final TableField<TransactionStartRecord, DateTime> EVENT_TIMESTAMP = createField(DSL.name("event_timestamp"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(6)", SQLDataType.TIMESTAMP)), this, "", new DateTimeConverter());

    /**
     * The column <code>stevedb.transaction_start.connector_pk</code>.
     */
    public final TableField<TransactionStartRecord, Integer> CONNECTOR_PK = createField(DSL.name("connector_pk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stevedb.transaction_start.id_tag</code>.
     */
    public final TableField<TransactionStartRecord, String> ID_TAG = createField(DSL.name("id_tag"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stevedb.transaction_start.start_timestamp</code>.
     */
    public final TableField<TransactionStartRecord, DateTime> START_TIMESTAMP = createField(DSL.name("start_timestamp"), SQLDataType.TIMESTAMP(6), this, "", new DateTimeConverter());

    /**
     * The column <code>stevedb.transaction_start.start_value</code>.
     */
    public final TableField<TransactionStartRecord, String> START_VALUE = createField(DSL.name("start_value"), SQLDataType.VARCHAR(255), this, "");

    private TransactionStart(Name alias, Table<TransactionStartRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionStart(Name alias, Table<TransactionStartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stevedb.transaction_start</code> table reference
     */
    public TransactionStart(String alias) {
        this(DSL.name(alias), TRANSACTION_START);
    }

    /**
     * Create an aliased <code>stevedb.transaction_start</code> table reference
     */
    public TransactionStart(Name alias) {
        this(alias, TRANSACTION_START);
    }

    /**
     * Create a <code>stevedb.transaction_start</code> table reference
     */
    public TransactionStart() {
        this(DSL.name("transaction_start"), null);
    }

    public <O extends Record> TransactionStart(Table<O> child, ForeignKey<O, TransactionStartRecord> key) {
        super(child, key, TRANSACTION_START);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stevedb.STEVEDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRANSACTION_START_CONNECTOR_PK_IDX, Indexes.TRANSACTION_START_IDTAG_IDX, Indexes.TRANSACTION_START_TRANSACTION_START_IDX);
    }

    @Override
    public Identity<TransactionStartRecord, Integer> getIdentity() {
        return (Identity<TransactionStartRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionStartRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTION_START_PRIMARY;
    }

    @Override
    public List<UniqueKey<TransactionStartRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRANSACTION_START_TRANSACTION_PK_UNIQUE);
    }

    @Override
    public List<ForeignKey<TransactionStartRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CONNECTOR_PK_T, Keys.FK_TRANSACTION_OCPP_TAG_ID_TAG);
    }

    private transient Connector _connector;
    private transient OcppTag _ocppTag;

    public Connector connector() {
        if (_connector == null)
            _connector = new Connector(this, Keys.FK_CONNECTOR_PK_T);

        return _connector;
    }

    public OcppTag ocppTag() {
        if (_ocppTag == null)
            _ocppTag = new OcppTag(this, Keys.FK_TRANSACTION_OCPP_TAG_ID_TAG);

        return _ocppTag;
    }

    @Override
    public TransactionStart as(String alias) {
        return new TransactionStart(DSL.name(alias), this);
    }

    @Override
    public TransactionStart as(Name alias) {
        return new TransactionStart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStart rename(String name) {
        return new TransactionStart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStart rename(Name name) {
        return new TransactionStart(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, DateTime, Integer, String, DateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
